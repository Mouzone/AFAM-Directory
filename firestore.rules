rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for specific roles
    function hasRequiredRole(allowedRoles) {
      return request.auth != null && allowedRoles.hasAny([request.auth.token.role]);
    }

    // Students collection rules
    match /students/{studentId} {
      allow read, create: if request.auth != null;

      // Roles with full access to students
      let adminTeacherPastorEtc = ["admin", "teacher", "pastor", "welcome team leader", "deacon"];
      allow read, create, update, delete: if hasRequiredRole(adminTeacherPastorEtc);

      // Private student data rules
      match /private/{document=**} {
        allow create, update: if hasRequiredRole(["student"]);
        allow read, create, update, delete: if hasRequiredRole(adminTeacherPastorEtc);
      }
    }

    // Privileges collection rules
    match /privileges/{role} {
      allow read: if request.auth != null;
    }

    // Organization roles rules
    match /organization/roles/{roleId}/{document=**} {
      // Roles with read, update, delete access
      let pastorAndOthers = ["deacon", "teacher", "welcome team leader"];
      allow read, update, delete: if hasRequiredRole(["admin"]) ||
                                      (hasRequiredRole(["pastor"]) && pastorAndOthers.hasAny([roleId])) ||
                                      (hasRequiredRole(["welcome team leader", "pastor"]) && roleId == "student");

      // Only admins can create role documents
      allow create: if hasRequiredRole(["admin"]);
    }

    // Pastor roles rules (simplified)
    match /organization/roles/pastor/{document=**} {
      allow read, create, update, delete: if hasRequiredRole(["admin"]);
    }

    // Organization teacher roles rules (simplified)
    match /organization/roles/teacher/{document=**} {
      allow read: if request.auth != null;
    }
  }
}