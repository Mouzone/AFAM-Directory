rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for specific roles
    function hasRequiredRole(allowedRoles) {
      return request.auth != null && request.auth.token.role is string && allowedRoles.hasAny([request.auth.token.role]);
    }

    // Students collection rules
    match /students/{studentId} {
      // Roles with full access to students
      allow read, create, update, delete: if hasRequiredRole(["admin", "teacher", "pastor", "welcome team leader", "deacon"]);

      // Private student data rules
      match /private/{document=**} {
        allow create, update: if hasRequiredRole(["student"]) && request.auth.uid == studentId;
        allow read, delete: if hasRequiredRole(["admin", "teacher", "pastor", "welcome team leader", "deacon"]);
      }
    }

    // Privileges collection rules
    match /privileges/{role} {
      allow read: if request.auth != null;
    }

    // Organization roles rules
    match /organization/roles/{roleId}/{document=**} {
      // Roles with read, update, delete access
      allow read, update, delete: if hasRequiredRole(["admin"]) ||
                                      (hasRequiredRole(["pastor"]) && ["deacon", "teacher", "welcome team leader"].hasAny([roleId]));

      // Only admins can create role documents
      allow create: if hasRequiredRole(["admin"]);
    }

    // Pastor roles rules (simplified)
    match /organization/roles/pastor/{document=**} {
      allow read, create, update, delete: if hasRequiredRole(["admin"]);
    }

    // Organization teacher roles rules (simplified)
    match /organization/roles/teacher/{document=**} {
      allow read: if request.auth != null;
    }
  }
}